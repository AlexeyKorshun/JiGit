/*
 *
 *  * Copyright (c) 2018 Rosberry. All rights reserved.
 *
 */

apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'

repositories {
    jcenter()
    // artifacts are published to this repository
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos")  \
                               ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            compilations.main.outputKinds('FRAMEWORK')
        }

        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation "io.ktor:ktor-client-core:1.1.2"
            implementation "io.ktor:ktor-client-json:1.1.2"
            implementation "io.ktor:ktor-client-logging:1.1.2"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.10.0"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.1.1"
        }
        androidMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            api "io.ktor:ktor-client-android:1.1.2"
            api "io.ktor:ktor-client-json-jvm:1.1.2"
            api "io.ktor:ktor-client-logging-jvm:1.1.2"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1"
        }
        iOSMain.dependencies {
            implementation "io.ktor:ktor-client-ios:1.1.2"
            implementation "io.ktor:ktor-client-json-native:1.1.2"
            implementation "io.ktor:ktor-client-logging-native:1.1.2"
        }
    }
}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 21
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.iOS.compilations.main.linkTaskName("FRAMEWORK", mode)

    from { kotlin.targets.iOS.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode
